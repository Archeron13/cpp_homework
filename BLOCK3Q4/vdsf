#include <vector>

class polygon: virtual public shape {
    std::vector<vector> points;
public:
    polygon (std::vector<vector> _points){
        for (int i=0;i<_points.size();++i){
            points.push_back(_points[i]);
        }
    }
    polygon& operator=(const polygon& obj){
        points.clear();
        for (int i=0;i<obj.points.size();++i){
            points.push_back(obj.points[i]);
        }
        return *this;
    }
    int vertices_count() const {
        int count=0;
        if (points.size()==0){
            return 0;
        }
        for (int i=1;i<points.size();++i){
            if (collinear(points[i],points[i-1])){
                continue;
            }
            else{
                count+=1;
            }
        }
        return count;
    }
    double perimeter() const override {
        double dist=0.0;
        int n=points.size();
        for(size_t b=0;b<n;++b){
            if (b==0){
                continue;
            }
            else if (b==n-1){
                dist += std::sqrt(std::pow((points[b].x - points[b-1].x), 2.0) + std::pow((points[b].y - points[b-1].y), 2.0));
                dist+=std::sqrt(std::pow((points[b-1].x-points[0].x),2.0)+std::pow((points[b-1].y-points[0].y),2.0));
            }
            else {
                dist += std::sqrt(std::pow((points[b].x - points[b-1].x), 2.0) + std::pow((points[b].y - points[b-1].y), 2.0));
            }
        }
        return dist;
    }
    double area() const override {
        double area=0;
        size_t n=points.size();
        for (size_t b=0;b<n;++b){
            if (b==0){
                continue;
            }
            else if (b==n-1){
                area+=cross_product(points[0],points[b-1]);
                area+=cross_product(points[b],points[b-1]);
            }
            else{
                area+=cross_product(points[b],points[b-1]);
            }
        }
        area=std::fabs(area/(2.0));
        return area;
    }

    vector center() const override {
        double area=0;
        double weight=0;
        vector centroid(0,0);
        size_t n=points.size();
        for (size_t b=0;b<n;++b){
            if (b==0){
                continue;
            }
            else if (b==n-1){
                weight=cross_product(points[b],points[b-1]);
                area+=weight;
                centroid.x+=(points[b].x+points[b-1].x)*weight;
                centroid.y+=(points[b].y+points[b-1].y)*weight;
                weight=cross_product(points[0],points[b-1]);
                area+=weight;
                centroid.x+=(points[b].x+points[b-1].x)*weight;
                centroid.y+=(points[b].y+points[b-1].y)*weight;
            }
            else{
                weight=cross_product(points[b],points[b-1]);
                area+=weight;
                centroid.x+=(points[b].x+points[b-1].x)*weight;
                centroid.y+=(points[b].y+points[b-1].y)*weight;
            }
        }
        area*=0.5;
        centroid.x /= (6.0*area);
        centroid.y /= (6.0)*area;
        return centroid;
    }
    bool operator==(const shape& obj) const override{
        polygon b=dynamic_cast<const polygon&>(obj);
        polygon a=*this;
        return (eq(a.center().x,b.center().x) and eq(a.center().y,b.center().y));
    }
    bool operator!=(const shape& obj) const override{
        return !(*this==obj);
    }
    bool congruent_to(const shape& obj) const override{
        polygon b=dynamic_cast<const polygon&> (obj);
        polygon a=*this;
        return (eq(a.area(),b.area()) and (eq(a.perimeter(),b.perimeter())))
    }
    void rotate(double angle) override{
        for (int i=0;i<points.size();++i){
            double temp=points[i].x;
            points[i].x= std::cos(angle)*points[i].x - std::sin(angle)*points[i].y;
            points[i].y= std::cos(angle)*points[i].y + std::sin(angle)*temp;
        }
    }
    void scale(double coefficient) override{
        for (int i=0;i<points.size();++i){
            points[i].x*=coefficient;
            points[i].y*=coefficient;
        }
    }
    void translate(vector transform) override{
        for (int i=0;i<points.size();++i){
            points[i].x+=transform.x;
            points[i].y+=transform.y;
        }
    }
    const std::vector<vector>& get_vertices() const {
        std::vector<vector> val;
        val.push_back(points[0]);
        for (int i=points.size()-1;i>1;--i){
            val.push_back(points[i]);
        }
        return val;
    }
};